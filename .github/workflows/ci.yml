
name: Pull Request Build & Test

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  windows:
    name: 'Windows Build & Test'
    strategy:
      matrix:
        arch: [ x64, x64_x86 ]
        compiler: [ msvc, clang ]
        config: [ debug, release, relwithdebinfo, minsizerel ]
        sanitizer: [ none, address, undefined, fuzz ]
        exclude:
          - compiler: msvc
            sanitizer: undefined
          - compiler: clang
            config: debug
            sanitizer: address
          - compiler: clang
            config: debug
            sanitizer: undefined
          - compiler: clang
            config: debug
            sanitizer: fuzz
          - arch: x64_x86
            sanitizer: undefined

    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Find vcvarsall.bat
        run: |
          $VCVarsAll = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere" -latest -find VC\Auxiliary\Build\vcvarsall.bat
          if (!$VCVarsAll) { exit 1 }
          echo "Using VCVarsAll: ${VCVarsAll}"
          Add-Content $env:GITHUB_ENV "VCVarsAll=$VCVarsAll"

      - name: Initialize CMake
        run: |
          $sanitizerArg = ""
          if ("${{matrix.sanitizer}}" -eq "fuzz") {
            $sanitizerArg = "-f"
          } elseif ("${{matrix.sanitizer}}" -ne "none") {
            $sanitizerArg = @("-s", "${{matrix.sanitizer}}")
          }
          & cmd /c "$env:VCVarsAll" ${{matrix.arch}} "&" scripts\init.cmd -c ${{matrix.compiler}} -b ${{matrix.config}} $sanitizerArg

      - name: Build
        run: |
          cmd /c "$env:VCVarsAll" ${{matrix.arch}} "&" scripts\build-all.cmd

      - name: Test
        if: ${{matrix.sanitizer != 'fuzz'}}
        run: |
          cmd /c "$env:VCVarsAll" ${{matrix.arch}} "&" scripts\run-tests.cmd

      - name: Fuzz
        if: ${{matrix.sanitizer == 'fuzz'}}
        run: |
          # 5 minutes should be a good duration for sanity checking
          cmd /c "$env:VCVarsAll" ${{matrix.arch}} "&" scripts\fuzz-all.cmd 300

  ubuntu:
    name: 'Linux Build & Test'
    strategy:
      matrix:
        compiler: [ gcc, clang ]
        config: [ debug, release, relwithdebinfo, minsizerel ]
        sanitizer: [ none, address, undefined, fuzz ]
        exclude:
          - compiler: gcc
            sanitizer: fuzz

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update GCC to 14+ if necessary
        if: ${{matrix.compiler == 'gcc'}}
        run: |
          gccMajorVer=$(gcc -dumpversion | cut -d. -f1)
          if [ $gccMajorVer -lt 134 ]; then
            sudo apt-get update
            sudo apt-get install gcc-14 g++-14
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100 --slave /usr/bin/g++ g++ /usr/bin/g++-14
          fi

      - name: Initialize CMake
        run: |
          sanitizerArg=""
          if [ "${{matrix.sanitizer}}" == "fuzz" ]; then
            sanitizerArg="-f"
          elif [ "${{matrix.sanitizer}}" != "none" ]; then
            sanitizerArg="-s ${{matrix.sanitizer}}"
          fi
          ./scripts/init.sh -c ${{matrix.compiler}} -b ${{matrix.config}} $sanitizerArg

      - name: Build
        run: |
          ./scripts/build-all.sh

      - name: Test
        if: ${{matrix.sanitizer != 'fuzz'}}
        run: |
          ./scripts/run-tests.sh

      - name: Fuzz
        if: ${{matrix.sanitizer == 'fuzz'}}
        run: |
          # 5 minutes should be a good duration for sanity checking
          ./scripts/fuzz-all.sh 300

  macos:
    name: 'macOS Build & Test'
    strategy:
      matrix:
        config: [ debug, release, relwithdebinfo, minsizerel ]
        sanitizer: [ none, address, undefined, fuzz ]

    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          path: inflatelib

      # For some reason, it seems as though the windows-latest and ubuntu-latest images both have vcpkg pre-configured,
      # but macos-latest does not. Simplest thing is to just check it out & bootstrap
      - name: Checkout vcpkg
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: vcpkg

      - name: Bootstrap vcpkg
        run: |
          ./vcpkg/bootstrap-vcpkg.sh
          echo "VCPKG_ROOT=${GITHUB_WORKSPACE}/vcpkg" >> $GITHUB_ENV

      - name: Initialize CMake
        run: |
          sanitizerArg=""
          if [ "${{matrix.sanitizer}}" == "fuzz" ]; then
            sanitizerArg="-f"
          elif [ "${{matrix.sanitizer}}" != "none" ]; then
            sanitizerArg="-s ${{matrix.sanitizer}}"
          fi
          ./inflatelib/scripts/init.sh -c clang -b ${{matrix.config}} $sanitizerArg

      - name: Build
        run: |
          ./inflatelib/scripts/build-all.sh

      - name: Test
        if: ${{matrix.sanitizer != 'fuzz'}}
        run: |
          ./inflatelib/scripts/run-tests.sh

      - name: Fuzz
        if: ${{matrix.sanitizer == 'fuzz'}}
        run: |
          # 5 minutes should be a good duration for sanity checking
          ./inflatelib/scripts/fuzz-all.sh 300
