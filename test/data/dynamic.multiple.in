
# This test has two blocks: one that just writes some "Lorem ipsum" text using only literals, and a second block that
# repeats the text a number of times using only length/distance pairs
>1
0       # bfinal = false
10      # Compressed with dynamic codes

# The text:
# Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna
# aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
# Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
# occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
00000   # HLIT = 257 (0 + 257)
00000   # HDIST = 1 (0 + 1)
1010    # HCLEN = 14 (10 + 4)

# Code Length Alphabet Code Lengths:
000 101 011 011 011 011 000 101 000 011 000 010 000 100

# Literal/Length & Distance Alphabet Code Lengths:
>>1
110 >1 0010101 >>1
1110
110 >1 0000000 >>1
100
010
100
110 >1 0001010 >>1
101
101
11111 >1 011 >>1
101
11111 >1 101 >>1
101
110 >1 0000000 >>1
00
100
011
011
00
100
100
101
1110
010
010
00
011
00
00
011
11110
00
011
00
00
100
010
100
110 >1 1111100 >>1
101
010

# Literal/Length Tree:
#   Symbol      Bit Count   Code
#   ' '         3           000
#   ','         7           1110110
#   '.'         7           1110111
#   'D'         8           11111010
#   'E'         8           11111011
#   'L'         8           11111100
#   'U'         8           11111101
#   'a'         4           0100
#   'b'         7           1111000
#   'c'         5           11000
#   'd'         5           11001
#   'e'         4           0101
#   'f'         7           1111001
#   'g'         7           1111010
#   'h'         8           11111110
#   'i'         3           001
#   'l'         4           0110
#   'm'         5           11010
#   'n'         4           0111
#   'o'         4           1000
#   'p'         5           11011
#   'q'         6           111010
#   'r'         4           1001
#   's'         5           11100
#   't'         4           1010
#   'u'         4           1011
#   'v'         7           1111011
#   'x'         7           1111100
#   END         8           11111111

# Encoded Data:
11111100 1000 1001 0101 11010 000
001 11011 11100 1011 11010 000
11001 1000 0110 1000 1001 000
11100 001 1010 000
0100 11010 0101 1010 1110110 000
11000 1000 0111 11100 0101 11000 1010 0101 1010 1011 1001 000
0100 11001 001 11011 001 11100 11000 001 0111 1111010 000
0101 0110 001 1010 1110110 000
11100 0101 11001 000
11001 1000 000
0101 001 1011 11100 11010 1000 11001 000
1010 0101 11010 11011 1000 1001 000
001 0111 11000 001 11001 001 11001 1011 0111 1010 000
1011 1010 000
0110 0100 1111000 1000 1001 0101 000
0101 1010 000
11001 1000 0110 1000 1001 0101 000
11010 0100 1111010 0111 0100 000
0100 0110 001 111010 1011 0100 1110111 000
11111101 1010 000
0101 0111 001 11010 000
0100 11001 000
11010 001 0111 001 11010 000
1111011 0101 0111 001 0100 11010 1110110 000
111010 1011 001 11100 000
0111 1000 11100 1010 1001 1011 11001 000
0101 1111100 0101 1001 11000 001 1010 0100 1010 001 1000 0111 000
1011 0110 0110 0100 11010 11000 1000 000
0110 0100 1111000 1000 1001 001 11100 000
0111 001 11100 001 000
1011 1010 000
0100 0110 001 111010 1011 001 11011 000
0101 1111100 000
0101 0100 000
11000 1000 11010 11010 1000 11001 1000 000
11000 1000 0111 11100 0101 111010 1011 0100 1010 1110111 000
11111010 1011 001 11100 000
0100 1011 1010 0101 000
001 1001 1011 1001 0101 000
11001 1000 0110 1000 1001 000
001 0111 000
1001 0101 11011 1001 0101 11111110 0101 0111 11001 0101 1001 001 1010 000
001 0111 000
1111011 1000 0110 1011 11011 1010 0100 1010 0101 000
1111011 0101 0110 001 1010 000
0101 11100 11100 0101 000
11000 001 0110 0110 1011 11010 000
11001 1000 0110 1000 1001 0101 000
0101 1011 000
1111001 1011 1111010 001 0100 1010 000
0111 1011 0110 0110 0100 000
11011 0100 1001 001 0100 1010 1011 1001 1110111 000
11111011 1111100 11000 0101 11011 1010 0101 1011 1001 000
11100 001 0111 1010 000
1000 11000 11000 0100 0101 11000 0100 1010 000
11000 1011 11011 001 11001 0100 1010 0100 1010 000
0111 1000 0111 000
11011 1001 1000 001 11001 0101 0111 1010 1110110 000
11100 1011 0111 1010 000
001 0111 000
11000 1011 0110 11011 0100 000
111010 1011 001 000
1000 1111001 1111001 001 11000 001 0100 000
11001 0101 11100 0101 1001 1011 0111 1010 000
11010 1000 0110 0110 001 1010 000
0100 0111 001 11010 000
001 11001 000
0101 11100 1010 000
0110 0100 1111000 1000 1001 1011 11010 1110111
11111111

# For the second block, repeat the text a bunch of times. The text is 445 characters in length. We can repeat the entire
# text 147 times with a single length/distance pair, which is what we do here.
>1
1       # bfinal = true
10      # Compressed with dynamic codes

11101   # HLIT = 286 (29 + 257)
10001   # HDIST = 18 (17 + 1)
1110    # HCLEN = 18 (14 + 4)

# Code Length Alphabet Code Lengths:
000 000 001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001

# Literal/Length & Distance Alphabet Code Lengths:
>>1
1 >1 1111111 >>1
1 >1 1101011 >>1
0
1 >1 0010001 >>1
0
1 >1 0000110 >>1
0

# Literal/Length Tree:
#   Symbol      Bit Count   Code
#   END         1           0
#   285         1           1
#
# Distance Tree:
#   Symbol      Bit Count   Code
#   17          1           0

# Encoded Data:
1 >1 1111111110000100 >>1
0 >1 0111100 >>1
0
