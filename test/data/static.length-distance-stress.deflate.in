
# This is a "stress" test in that it tests all length/distance codes as well as their minimum and maximums. This gives
# a total of 49 lengths to test (29 codes + 20 with extra bits) and 56 distances (30 + 26 with extra bits). We begin
# with the bytes 0-255, and in order to make the data more predictable, we start by testing all possible lengths, each
# with a distance of 256. This ensures that we repeat the sequence 0-255 for all of the length tests (which will make up
# a majority of the output). For the distances, we have no control over the data it copies from, so we use small lengths
# to make the expected output shorter and easier to produce.
# NOTE: This test is only applicable to Deflate
>1
1       # bfinal = true
01      # Compressed with static codes

# Encoded Data:
>>1

# First step: write the bytes 0-255
00110000
00110001
00110010
00110011
00110100
00110101
00110110
00110111
00111000
00111001
00111010
00111011
00111100
00111101
00111110
00111111
01000000
01000001
01000010
01000011
01000100
01000101
01000110
01000111
01001000
01001001
01001010
01001011
01001100
01001101
01001110
01001111
01010000
01010001
01010010
01010011
01010100
01010101
01010110
01010111
01011000
01011001
01011010
01011011
01011100
01011101
01011110
01011111
01100000
01100001
01100010
01100011
01100100
01100101
01100110
01100111
01101000
01101001
01101010
01101011
01101100
01101101
01101110
01101111
01110000
01110001
01110010
01110011
01110100
01110101
01110110
01110111
01111000
01111001
01111010
01111011
01111100
01111101
01111110
01111111
10000000
10000001
10000010
10000011
10000100
10000101
10000110
10000111
10001000
10001001
10001010
10001011
10001100
10001101
10001110
10001111
10010000
10010001
10010010
10010011
10010100
10010101
10010110
10010111
10011000
10011001
10011010
10011011
10011100
10011101
10011110
10011111
10100000
10100001
10100010
10100011
10100100
10100101
10100110
10100111
10101000
10101001
10101010
10101011
10101100
10101101
10101110
10101111
10110000
10110001
10110010
10110011
10110100
10110101
10110110
10110111
10111000
10111001
10111010
10111011
10111100
10111101
10111110
10111111
110010000
110010001
110010010
110010011
110010100
110010101
110010110
110010111
110011000
110011001
110011010
110011011
110011100
110011101
110011110
110011111
110100000
110100001
110100010
110100011
110100100
110100101
110100110
110100111
110101000
110101001
110101010
110101011
110101100
110101101
110101110
110101111
110110000
110110001
110110010
110110011
110110100
110110101
110110110
110110111
110111000
110111001
110111010
110111011
110111100
110111101
110111110
110111111
111000000
111000001
111000010
111000011
111000100
111000101
111000110
111000111
111001000
111001001
111001010
111001011
111001100
111001101
111001110
111001111
111010000
111010001
111010010
111010011
111010100
111010101
111010110
111010111
111011000
111011001
111011010
111011011
111011100
111011101
111011110
111011111
111100000
111100001
111100010
111100011
111100100
111100101
111100110
111100111
111101000
111101001
111101010
111101011
111101100
111101101
111101110
111101111
111110000
111110001
111110010
111110011
111110100
111110101
111110110
111110111
111111000
111111001
111111010
111111011
111111100
111111101
111111110
111111111

# Second step: exhaust all the lengths. This will write 3385 bytes (3641 bytes in total), which means we will have
# written the entire sequence 0-255 14 times, followed by the sequence 0-56
0000001 01111 >1 111111 >>1
0000010 01111 >1 111111 >>1
0000011 01111 >1 111111 >>1
0000100 01111 >1 111111 >>1
0000101 01111 >1 111111 >>1
0000110 01111 >1 111111 >>1
0000111 01111 >1 111111 >>1
0001000 01111 >1 111111 >>1
0001001 >1 0 >>1 01111 >1 111111 >>1
0001001 >1 1 >>1 01111 >1 111111 >>1
0001010 >1 0 >>1 01111 >1 111111 >>1
0001010 >1 1 >>1 01111 >1 111111 >>1
0001011 >1 0 >>1 01111 >1 111111 >>1
0001011 >1 1 >>1 01111 >1 111111 >>1
0001100 >1 0 >>1 01111 >1 111111 >>1
0001100 >1 1 >>1 01111 >1 111111 >>1
0001101 >1 00 >>1 01111 >1 111111 >>1
0001101 >1 11 >>1 01111 >1 111111 >>1
0001110 >1 00 >>1 01111 >1 111111 >>1
0001110 >1 11 >>1 01111 >1 111111 >>1
0001111 >1 00 >>1 01111 >1 111111 >>1
0001111 >1 11 >>1 01111 >1 111111 >>1
0010000 >1 00 >>1 01111 >1 111111 >>1
0010000 >1 11 >>1 01111 >1 111111 >>1
0010001 >1 000 >>1 01111 >1 111111 >>1
0010001 >1 111 >>1 01111 >1 111111 >>1
0010010 >1 000 >>1 01111 >1 111111 >>1
0010010 >1 111 >>1 01111 >1 111111 >>1
0010011 >1 000 >>1 01111 >1 111111 >>1
0010011 >1 111 >>1 01111 >1 111111 >>1
0010100 >1 000 >>1 01111 >1 111111 >>1
0010100 >1 111 >>1 01111 >1 111111 >>1
0010101 >1 0000 >>1 01111 >1 111111 >>1
0010101 >1 1111 >>1 01111 >1 111111 >>1
0010110 >1 0000 >>1 01111 >1 111111 >>1
0010110 >1 1111 >>1 01111 >1 111111 >>1
0010111 >1 0000 >>1 01111 >1 111111 >>1
0010111 >1 1111 >>1 01111 >1 111111 >>1
11000000 >1 0000 >>1 01111 >1 111111 >>1
11000000 >1 1111 >>1 01111 >1 111111 >>1
11000001 >1 00000 >>1 01111 >1 111111 >>1
11000001 >1 11111 >>1 01111 >1 111111 >>1
11000010 >1 00000 >>1 01111 >1 111111 >>1
11000010 >1 11111 >>1 01111 >1 111111 >>1
11000011 >1 00000 >>1 01111 >1 111111 >>1
11000011 >1 11111 >>1 01111 >1 111111 >>1
11000100 >1 00000 >>1 01111 >1 111111 >>1
11000100 >1 11110 >>1 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1

# Third step: before we test all of the distances, we need to make sure that we have enough data in the distances window
# to actually test all possible distances. At this point in time, there are 3,641 bytes in the window. By the time we
# test the largest distance, we need 32,768 bytes in the buffer. There are 55 copies as a part of the distance testing
# before that point in time, each of which will copy 3 bytes (for a total of 165 bytes copied). That means that we need
# to first write an additional 28,962 bytes. We do this by repeating the 0-255 sequence
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
11000101 01111 >1 111111 >>1
0010100 >1 111 >>1 01111 >1 111111 >>1

# Final step: exhaust all the distances. The output here is not as easy to calculate and is done by hand
0000001 00000
0000001 00001
0000001 00010
0000001 00011
0000001 00100 >1 0 >>1
0000001 00100 >1 1 >>1
0000001 00101 >1 0 >>1
0000001 00101 >1 1 >>1
0000001 00110 >1 00 >>1
0000001 00110 >1 11 >>1
0000001 00111 >1 00 >>1
0000001 00111 >1 11 >>1
0000001 01000 >1 000 >>1
0000001 01000 >1 111 >>1
0000001 01001 >1 000 >>1
0000001 01001 >1 111 >>1
0000001 01010 >1 0000 >>1
0000001 01010 >1 1111 >>1
0000001 01011 >1 0000 >>1
0000001 01011 >1 1111 >>1
0000001 01100 >1 00000 >>1
0000001 01100 >1 11111 >>1
0000001 01101 >1 00000 >>1
0000001 01101 >1 11111 >>1
0000001 01110 >1 000000 >>1
0000001 01110 >1 111111 >>1
0000001 01111 >1 000000 >>1
0000001 01111 >1 111111 >>1
0000001 10000 >1 0000000 >>1
0000001 10000 >1 1111111 >>1
0000001 10001 >1 0000000 >>1
0000001 10001 >1 1111111 >>1
0000001 10010 >1 00000000 >>1
0000001 10010 >1 11111111 >>1
0000001 10011 >1 00000000 >>1
0000001 10011 >1 11111111 >>1
0000001 10100 >1 000000000 >>1
0000001 10100 >1 111111111 >>1
0000001 10101 >1 000000000 >>1
0000001 10101 >1 111111111 >>1
0000001 10110 >1 0000000000 >>1
0000001 10110 >1 1111111111 >>1
0000001 10111 >1 0000000000 >>1
0000001 10111 >1 1111111111 >>1
0000001 11000 >1 00000000000 >>1
0000001 11000 >1 11111111111 >>1
0000001 11001 >1 00000000000 >>1
0000001 11001 >1 11111111111 >>1
0000001 11010 >1 000000000000 >>1
0000001 11010 >1 111111111111 >>1
0000001 11011 >1 000000000000 >>1
0000001 11011 >1 111111111111 >>1
0000001 11100 >1 0000000000000 >>1
0000001 11100 >1 1111111111111 >>1
0000001 11101 >1 0000000000000 >>1
0000001 11101 >1 1111111111111 >>1

# And finally, the end
0000000
